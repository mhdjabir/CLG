<style>
h2{
  color: #ff9a47;
  font-size: 2rem;
  font-weight: 600;
}
h3{
  color: #ff9a47;
  font-size: 1.5rem;
  font-weight: 600;
}

</style>
<div class="container1">

  <div class="shipping-info">
    <h2>Shipping Information</h2>
    <form id="addressForm" action="/save-address" method="POST">
      <div class="form-group">
        <label for="name">Full Name:</label>
        <input type="text" id="name" name="name" placeholder="Enter your full name" required>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" placeholder="Enter your address" required>
      </div>
      <div class="form-group">
        <label for="city">City:</label>
        <input type="text" id="city" name="city" placeholder="Enter your city" required>
      </div> 
      <div class="form-group"> 
        <label for="state">State:</label>
        <input type="text" id="state" name="state" placeholder="Enter your state" required>
      </div>
      <div class="form-group">
        <label for="zip">Pin Code:</label>
        <input type="text" id="zip" name="zip" placeholder="Enter your Pin code" required>
      </div> 
      <div class="form-group">
        <label for="phone">Phone Number:</label>
        <input type="text" id="phone" name="phone" placeholder="Enter your phone number" required>
        <span id="phoneError" class="error-message"></span> <!-- Error message container -->
      </div>
      <button type="submit" id="saveButton" class="btn btn-success">Save</button>
    </form>
  </div> 

  <div class="order-summary">
    <table class="order-table">
      <thead>
        <tr>
          <h3>Total amount: ₹{{total}}</h3> 
        </tr>
      </thead>
    </table>

    <div class="payment-method">
      <div class="form-group">
        <label for="payment-method">Select Payment Method:</label>
        <select id="payment-method" name="paymentMethod" required>
          <option value="cash-on-delivery">Cash on Delivery</option>
          <option value="online-payment">Online Payment</option>
        </select>
      </div>
    </div>

    <div class="checkout-button">
      <button id="checkoutButton" type="button" class="btn btn-success" style="display: none;">Checkout</button>
      <form id="proceedToPayForm" action="/create-order" method="POST" style="display: none;">
        <input type="hidden" name="amount" value="{{total}}">
        <input type="hidden" name="paymentMethod" value="Online Payment">
        <button type="submit" class="btn btn-success">Proceed to Pay ₹{{total}}</button>
      </form>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const addressForm = document.getElementById('addressForm');
    const saveButton = document.getElementById('saveButton');
    const paymentMethodSelect = document.getElementById('payment-method');
    const checkoutButton = document.getElementById('checkoutButton');
    const proceedToPayForm = document.getElementById('proceedToPayForm');

    // Fetch the saved address
    fetch('/get-address')
      .then(response => response.json())
      .then(data => {
        if (data.success && data.address) {
          // Pre-fill the form fields
          const address = data.address;
          document.getElementById('name').value = address.name || '';
          document.getElementById('address').value = address.address || '';
          document.getElementById('city').value = address.city || '';
          document.getElementById('state').value = address.state || '';
          document.getElementById('zip').value = address.zip || '';
          document.getElementById('phone').value = address.phone || '';

          // Hide the save button initially
          saveButton.style.display = 'none';
        }
      })
      .catch(err => console.error('Error fetching address:', err));

    // Show the save button only when the form is modified
    addressForm.addEventListener('input', () => {
      saveButton.style.display = 'block';
    });

    // Handle form submission via AJAX
    addressForm.addEventListener('submit', (e) => {
      e.preventDefault();

      const phoneInput = document.getElementById('phone');
      const phoneError = document.getElementById('phoneError');
      const formData = new FormData(e.target);
      const addressData = Object.fromEntries(formData.entries());

      // Validate phone number length
      if (!addressData.phone || addressData.phone.length !== 10 || isNaN(addressData.phone)) {
        phoneError.textContent = 'Phone number must be exactly 10 digits.';
        phoneError.style.display = 'block'; // Show the error message
        phoneInput.classList.add('input-error'); // Optional: Add a red border to the input
        return;
      } else {
        phoneError.style.display = 'none'; // Hide the error message if valid
        phoneInput.classList.remove('input-error');
      }

      fetch('/save-address', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(addressData)
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Address saved successfully!');
            saveButton.style.display = 'none'; // Hide the save button after saving
          } else {
            phoneError.textContent = data.message || 'Failed to save address.';
            phoneError.style.display = 'block';
          }
        })
        .catch(err => {
          phoneError.textContent = 'An error occurred while saving the address.';
          phoneError.style.display = 'block';
          console.error('Error saving address:', err);
        });
    });

    // Function to toggle buttons based on payment method
    const toggleButtons = () => {
      const selectedMethod = paymentMethodSelect.value;
      if (selectedMethod === 'cash-on-delivery') {
        checkoutButton.style.display = 'block';
        proceedToPayForm.style.display = 'none';
      } else if (selectedMethod === 'online-payment') {
        checkoutButton.style.display = 'none';
        proceedToPayForm.style.display = 'block';
      }
    };

    // Initial toggle on page load
    toggleButtons();

    // Add event listener to payment method dropdown
    paymentMethodSelect.addEventListener('change', toggleButtons);

    // Handle checkout button click
    checkoutButton.addEventListener('click', (e) => {
      e.preventDefault();

      const paymentMethod = paymentMethodSelect.value;

      if (paymentMethod === 'cash-on-delivery') {
        fetch('/place-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ paymentMethod })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.href = '/order-success';
            } else {
              alert('Failed to place order. Please try again.');
            }
          })
          .catch(err => console.error('Error placing order:', err));
      }
    });
  });

  document.getElementById('proceedToPayForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const response = await fetch('/place-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ paymentMethod: 'online-payment' }),
    });

    const data = await response.json();

    if (data.success) {
        const options = {
            key: data.key,
            amount: data.amount * 100, // Amount in paise
            currency: 'INR',
            name: 'EKS Store',
            description: 'Order Payment',
            order_id: data.razorpayOrderId,
            handler: async function (response) {
                const verifyResponse = await fetch('/verify-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpayOrderId: response.razorpay_order_id,
                        razorpayPaymentId: response.razorpay_payment_id,
                        razorpaySignature: response.razorpay_signature,
                    }),
                });

                const verifyData = await verifyResponse.json();
                if (verifyData.success) {
                    window.location.href = verifyData.redirect;
                } else {
                    alert('Payment verification failed. Redirecting to place order page.');
                    window.location.href = verifyData.redirect;
                }
            },
            prefill: {
                name: '{{user.name}}',
                email: '{{user.email}}',
                contact: '{{user.phone}}',
            },
            theme: {
                color: '#ff9a47',
            },
        };

        const razorpay = new Razorpay(options);
        razorpay.open();
    } else {
        alert('Failed to initiate payment. Please try again.');
    }
  });
</script>
